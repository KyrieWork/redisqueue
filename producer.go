package redisqueue

import (
	"context"

	"github.com/redis/go-redis/v9"
)

// ProducerOptions configures a Producer instance.
type ProducerOptions struct {
	// StreamMaxLength limits the maximum number of entries in each stream.
	// Set to 0 to disable length limiting.
	StreamMaxLength int64

	// ApproximateMaxLength allows Redis to use approximate trimming for better performance.
	// When true, Redis may keep slightly more entries than StreamMaxLength.
	ApproximateMaxLength bool

	// RedisClient allows providing a custom Redis client. Takes precedence over RedisOptions.
	RedisClient redis.UniversalClient

	// RedisOptions configures the Redis connection when RedisClient is not provided.
	RedisOptions *RedisOptions
}

// Producer publishes messages to Redis streams with automatic stream management.
type Producer struct {
	options *ProducerOptions
	redis   redis.UniversalClient
}

// NewProducer creates a new Producer with default settings.
//
// Default configuration:
//   - StreamMaxLength: 1000 (streams trimmed to ~1000 entries)
//   - ApproximateMaxLength: true (allows efficient trimming)
//
// Returns an error if Redis connection cannot be established.
func NewProducer() (*Producer, error) {
	return NewProducerOptions(defaultProducerOptions)
}

// NewProducerOptions creates a new Producer with the provided configuration.
//
// Redis connectivity is verified during initialization.
// Returns an error if Redis is unreachable.
func NewProducerOptions(opts *ProducerOptions) (*Producer, error) {
	var r redis.UniversalClient

	if opts.RedisClient != nil {
		r = opts.RedisClient
	} else {
		r = NewRedisClient(opts.RedisOptions)
	}

	if err := redisPreflightChecks(context.Background(), r); err != nil {
		return nil, err
	}

	return &Producer{
		options: opts,
		redis:   r,
	}, nil
}

// Enqueue publishes a message to the specified Redis stream.
//
// The message ID will be automatically generated by Redis if msg.ID is empty.
// If msg.ID is provided, it must be greater than any existing message ID in the stream.
// After successful enqueuing, msg.ID will be updated with the actual message ID.
//
// Stream trimming is applied according to the configured MaxLength settings.
//
// Parameters:
//   - ctx: context for cancellation and timeouts
//   - msg: message to enqueue (Stream and Values are required)
//
// Returns an error if the Redis operation fails or if the message format is invalid.
func (p *Producer) Enqueue(ctx context.Context, msg *Message) error {
	id, err := p.redis.XAdd(ctx, &redis.XAddArgs{
		ID:     msg.ID,
		Stream: msg.Stream,
		Values: msg.Values,
		MaxLen: p.options.StreamMaxLength,
		Approx: p.options.ApproximateMaxLength,
	}).Result()
	if err != nil {
		return err
	}
	msg.ID = id
	return nil
}

var defaultProducerOptions = &ProducerOptions{
	StreamMaxLength:      1000,
	ApproximateMaxLength: true,
}
